#!/usr/bin/env bash

# set the hostname for this machine at this location
NIX_CONFIG_PATH=$HOME/Repos/nixos
NIX_HOST_PATH=$HOME/.config/nixos/host
DOTFILES_PATH=$HOME/.dotfiles
LOGFILE=$NIX_CONFIG_PATH/nixos-switch.log
spinner="$DOTFILES_PATH/scripts/spinner"
emoji="$DOTFILES_PATH/scripts/emoji"

set -e

function generate_hw_config {
    nixos-generate-config --show-hardware-config > "./nixos/hosts/$1/hardware-configuration.nix"
}

function new_host {
    # [TODO] work on this function

    # generate default.nix and hardware-configuration.nix for a new host
    echo "Generating hardware config..."
    read -rp "New host name ($(hostname)): " host

    if [[ -z $host ]]; then
        host=$(hostname)
    fi

    # copy and update template default.nix
    cp -r ./nixos/hosts/.temp ./nixos/hosts/"${host}"
    default=./nixos/hosts/${host}/default.nix
    to_replace=$(rg 'system.stateVersion' "$default")
    replacement_text=$(rg 'system.stateVersion' /etc/nixos/configuration.nix)
    sed -i "/$to_replace/$replacement_text" "$default"

    # generate hardware configuration
    generate_hw_config "$host"
    git --git-dir="$NIX_CONFIG_PATH/.git" --work-tree="$NIX_CONFIG_PATH" add .
    echo "$host" > "$NIX_HOST_PATH"
}

function choose_host {
    # if host path doesn't exist, choose one
    if [[ ! -e $NIX_HOST_PATH || ! -s $NIX_HOST_PATH ]]; then
        mkdir -p "$(dirname "$NIX_HOST_PATH")"
        choices=$(find ./nixos/hosts/* -maxdepth 1 -type d -exec basename {} \;)
        choice=$(echo "$choices new_host" | sed 's/ /\n/g' | fzf --height 10%)
        if [[ $choice == "new_host" ]]; then
            new_host
        else
            echo "$choice" > "$NIX_HOST_PATH"
            msg="Do you want to generate a new hardware config (recommended if this is a new machine)? [y/n] "
            while true; do
                read -rp "$msg" yn
                case $yn in
                    [yY] ) generate_hw_config "$choice"; break;;
                    [nN] ) break;;
                    * ) echo 'invalid response'; continue;;
                esac
            done

        fi
    fi
}

function gh_commit {
    (git --git-dir="$NIX_CONFIG_PATH/.git" --work-tree="$NIX_CONFIG_PATH" \
        commit -am "$(nixos-rebuild list-generations | rg True)")
}

function rebuild {
    dry_run=$1
    ask_commit=$2
    force_commit=$3
    host=$(cat "$NIX_HOST_PATH")
    switch="switch"

    if $dry_run; then
        switch="dry-activate"
    fi

    sudo -v

    $spinner $$ "Building..." &
    spinner_pid=$!

    sudo nixos-rebuild "$switch" --impure --flake "$NIX_CONFIG_PATH"#"$host" 2>&1 \
        | sudo tee "$LOGFILE" > /dev/null

    exit_code=${PIPESTATUS[0]}

    kill $spinner_pid 2>/dev/null || true
    wait $spinner_pid 2>/dev/null || true
    echo

    if [ "$exit_code" -eq 0 ]; then

        echo ":blue-circle: Build Succeeded" | $emoji -m
        if [[ $dry_run == true ]]; then  # do not commit on dry runs
            echo "(dry run; no changes committed)"
        else
            if [[ $force_commit == true ]]; then gh_commit
            elif [[ $ask_commit == true ]]; then
                read -rp "Do you want to commit this configuration? (y/n) " yn
                case $yn in
                    [yY] ) gh_commit;;
                    [nN] ) exit 0;;
                    * ) echo 'invalid response'; exit 1;;
                esac
            fi
        fi

    else

      echo ":red-circle: Build Failed..." | $emoji -m
      set +e
      hash=$(rg --color=always 'hash mismatch' < "$LOGFILE")
      if [[ -n $hash ]]; then
          echo "$hash"
          rg --color=always 'specified:' < "$LOGFILE"
          rg --color=always 'got:' < "$LOGFILE"
      else
          rg --color=always error < "$LOGFILE"
      fi

    fi
}

function main {
    ask_commit=true
    dry_run=false
    force_commit=false
    script=$(basename "$0")
    usage="Usage: $script [-d|--dry-run] [-y|--commit] [-n|--no-commit] [-h|--help]"

    cd "$DOTFILES_PATH" || exit
    echo ":snowflake: Rebuilding NixOS..." | $emoji -m

    shopt -s globstar
    eval set -- "$(getopt -o 'dynh' --long 'dry-run,commit,no-commit,help' -n "$script" -- "$@")"

    while true; do
        case "$1" in
            -d|--dry-run) dry_run=true; shift;;
            -y|--commit) force_commit=true; shift;;
            -n|--no-commit) ask_commit=false; shift;;
            -h|--help) echo "$usage"; exit 0;;
            --) shift; break;;
            ?) echo "Invalid option. $usage"; exit 1;;
        esac
    done

    if [[ $ask_commit == true ]] || [[ $force_commit == true ]]; then
        git --git-dir="$NIX_CONFIG_PATH/.git" --work-tree="$NIX_CONFIG_PATH" diff -U0
    fi

    choose_host
    rebuild $dry_run $ask_commit $force_commit
}

main "$@"
