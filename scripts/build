#!/usr/bin/env bash

NIX_HOST_PATH=$HOME/.config/nixos/host

function new_host {
    echo "Generating hardware config..."
    read -p "New host name ($(hostname)): " host

    if [[ -z $host ]]; then
        host=$(hostname)
    fi

    # copy and update template default.nix
    cp -r ./hosts/.temp ./hosts/${host}
    default=./hosts/${host}/default.nix
    to_replace=$(rg 'system.stateVersion' $default)
    replacement_text=$(rg 'system.stateVersion' /etc/nixos/configuration.nix)
    sed -i "/$to_replace/c\\$replacement_text" $default

    # generate hardware configuration
    nixos-generate-config --show-hardware-config > hosts/${host}/hardware-configuration.nix
    git add .
    echo $host > $NIX_HOST_PATH
}

function choose_host {
    # if host path doesn't exist, choose one
    if [[ ! -e $NIX_HOST_PATH || ! -s $NIX_HOST_PATH ]]; then
        mkdir -p $(dirname $NIX_HOST_PATH)
        choices=$(find ./hosts/* -maxdepth 1 -type d -exec basename {} \;)
        choice=$(echo $choices | sed 's/$/ new_host/' | sed 's/ /\n/g' | fzf --height 10%)
        if [[ $choice == "new_host" ]]; then
            new_host
        else
            echo $choice > $NIX_HOST_PATH
        fi
    fi
}

cd $HOME/.dotfiles/nixos
echo "❄️ Rebuilding NixOS..."

choose_host

host=$(cat $NIX_HOST_PATH)
git diff -U0 **/*.nix
sudo nixos-rebuild switch --impure --flake .#$host &>nixos-switch.log

if [[ $? -gt 0 ]]; then
    echo "🔴 Build Failed..."
    hash=$(cat nixos-switch.log | rg --color=always 'hash mismatch')
    if [[ -n $hash ]]; then
        echo $hash
        cat nixos-switch.log | rg --color=always 'specified:'
        cat nixos-switch.log | rg --color=always 'got:'
    else
        cat nixos-switch.log | rg --color=always error
    fi
else
    echo "🔵 Build Succeeded"
    git commit -am "$(nixos-rebuild list-generations | rg current)"
fi
